{"version":3,"sources":["../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/index.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","views/ContactsPage.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"names":["alphabet","previousSeed","shuffled","randomFromSeed","require","ORIGINAL","reset","setCharacters","_alphabet_","length","Error","unique","split","filter","item","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","push","splice","shuffle","module","exports","get","characters","seed","lookup","index","build","isValid","clusterWorkerId","generate","seedValue","worker","workerId","newCharacters","undefined","_seed_","counter","previousSeconds","str","seconds","Date","now","random","format","number","done","loopCounter","pow","randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","i","mask","log","LN2","step","id","RegExp","replace","test","ContactForm","dispatch","useDispatch","useState","name","setName","inputName","useCallback","event","currentTarget","value","setNumber","inputNumber","contacts","useSelector","contactsSelectors","getAllContacts","handleSubmit","preventDefault","find","contact","alert","contactsOperations","addContact","onSubmit","className","htmlFor","type","shortId","pattern","title","required","onChange","Filter","getFilter","e","changeFilter","ContactList","getVisibleContacts","onRemove","removeContact","useEffect","fetchContacts","map","onClick","ContactsPage","Container","_slicedToArray","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","_s","_i","next","err","unsupportedIterableToArray","TypeError"],"mappings":"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","file":"static/js/3.d663c976.chunk.js","sourcesContent":["'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nmodule.exports = 0;\n","import React, { useCallback, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport shortId from 'shortid';\r\nimport { contactsOperations } from '../../redux/contacts';\r\nimport { contactsSelectors } from '../../redux/contacts';\r\n\r\nexport default function ContactForm() {\r\n    const dispatch = useDispatch();\r\n\r\n    const [name, setName] = useState('');\r\n    const inputName = useCallback(event => {\r\n        setName(event.currentTarget.value);\r\n    }, []);\r\n\r\n    const [number, setNumber] = useState('');\r\n    const inputNumber = useCallback(event => {\r\n        setNumber(event.currentTarget.value);\r\n    }, []);\r\n\r\n    const contacts = useSelector(contactsSelectors.getAllContacts);\r\n\r\n    const handleSubmit = useCallback(\r\n        event => {\r\n            event.preventDefault();\r\n            const nameExistCheck = contacts.find(\r\n                contact => contact.name === name,\r\n            );\r\n            nameExistCheck\r\n                ? alert('This name has already exists, try another one!')\r\n                : dispatch(contactsOperations.addContact({ name, number }));\r\n            setName('');\r\n            setNumber('');\r\n        },\r\n        [dispatch, name, number],\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={handleSubmit} className=\"form-container\">\r\n                <label htmlFor={name} className=\"form-label add-contact\">\r\n                    Name\r\n                </label>\r\n                <input\r\n                    className=\"form-input add-contact\"\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    id={shortId.generate()}\r\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов.\"\r\n                    required\r\n                    onChange={inputName}\r\n                    value={name}\r\n                />\r\n                <label htmlFor={number} className=\"form-label add-contact\">\r\n                    Number\r\n                </label>\r\n                <input\r\n                    className=\"form-input add-contact\"\r\n                    type=\"tel\"\r\n                    name=\"number\"\r\n                    id={shortId.generate()}\r\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                    required\r\n                    onChange={inputNumber}\r\n                    value={number}\r\n                />\r\n                <button type=\"submit\" className=\"form-button add-contact\">\r\n                    Add contact\r\n                </button>\r\n            </form>\r\n        </>\r\n    );\r\n}\r\n","import React, { useCallback } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { changeFilter, contactsSelectors } from '../../redux/contacts';\r\n\r\nexport default function Filter() {\r\n    const dispatch = useDispatch();\r\n    const value = useSelector(contactsSelectors.getFilter);\r\n    const onChange = useCallback(\r\n        e => dispatch(changeFilter(e.currentTarget.value)),\r\n        [dispatch],\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <div className=\"filter-container\">\r\n                <label htmlFor=\"filter\" className=\"form-label add-contact\">\r\n                    Search Contact\r\n                </label>\r\n                <input\r\n                    value={value}\r\n                    name=\"filter\"\r\n                    onChange={onChange}\r\n                    className=\"form-input filter\"\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","import React, { useEffect, useCallback } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\r\n\r\nexport default function ContactList() {\r\n    const dispatch = useDispatch();\r\n    const contacts = useSelector(contactsSelectors.getVisibleContacts);\r\n    const onRemove = useCallback(\r\n        id => dispatch(contactsOperations.removeContact(id)),\r\n        [dispatch],\r\n    );\r\n    useEffect(() => {\r\n        dispatch(contactsOperations.fetchContacts());\r\n    }, [dispatch]);\r\n    return (\r\n        <>\r\n            <ul className=\"contact-list\">\r\n                {contacts.map(({ id, name, number }) => (\r\n                    <li key={id} id={id}>\r\n                        <p className=\"text-name\">{name}</p>\r\n                        <p className=\"text-number\">{number}</p>\r\n                        <button\r\n                            className=\"btn-delete\"\r\n                            onClick={() => onRemove(id)}\r\n                        ></button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Container from '../components/Container';\r\nimport ContactForm from '../components/ContactForm';\r\nimport Filter from '../components/Filter';\r\nimport ContactList from '../components/ContactList';\r\n\r\nconst ContactsPage = () => (\r\n    <>\r\n        <div className=\"contacts-page-container\">\r\n            <Container className=\"phonebook-cont\" title=\"Phonebook\">\r\n                <ContactForm />\r\n            </Container>\r\n            <Container className=\"contacts-cont\" title=\"Contacts\">\r\n                <Filter />\r\n                <ContactList />\r\n            </Container>\r\n        </div>\r\n    </>\r\n);\r\n\r\nexport default ContactsPage;\r\n","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}